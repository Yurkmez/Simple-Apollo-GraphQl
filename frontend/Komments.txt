Как это работает (Apollo client + GraphQl).
_______index.js_________
import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';

У нас есть 2 компонента. 
В первый (Dogs) мы передаем -> ф-цию onDogSelected,
****************************************
<Dogs onDogSelected={onDogSelected} />
****************************************
которая возвращает результат - выбранную породу собаки.
При демонстрации второго (DogPhoto)Б который отражается только при наличии данных в "selectedDog":
****************************************
{selectedDog && <DogPhoto breed={selectedDog} />}
****************************************
мы передаем туда выбранную породу и компонент отображает случайное фото выбранной породы.

_______Doogs.js__DogPhoto.js _________
Здесь мы конструируем (gql) и выполняем (useQuery) запрос.
Результат отображаем.

________Что на стороне бэкэнда___________
import { ApolloServer, gql } from 'apollo-server';

Конструируем схему:
*************************
const typeDefs = `
  type Query {
    dogs: [Dog]
		dog(breed: String!): Dog
  }

	type Dog {
		id: String!
		breed: String!
		displayImage: String
		images: [Image]
		subbreeds: [String]
	}

	type Image {
		url: String!
		id: String!
	}
`;
****************************
И предоставляем ф-ции обработки полей схемы

*****************************
const resolvers = {
    Query: {
        dogs: async () => {
            const results = await fetch(`${API}/breeds/list/all`);
            const { message: dogs } = await results.json();
            return _.map(dogs, createDog);
        },
        dog: async (root, { breed }) => {
            const results = await fetch(`${API}/breed/${breed}/list`);
            const { message: subbreeds } = await results.json();

            return createDog(subbreeds, breed);
        },
    },
    Dog: {
        displayImage: async ({ breed }) => {
            const results = await fetch(`${API}/breed/${breed}/images/random`);
            const { message: image } = await results.json();
            return image;
        },
        images: async ({ breed }) => {
            const results = await fetch(`${API}/breed/${breed}/images`);
            const { message: images } = await results.json();
            return images.map((image) => ({ url: image, id: unique(image) }));
        },
    },
};
********************************
И создаем сервер из этих 2-х сущностей
********************************
const server = new ApolloServer({
    typeDefs,
    resolvers,
});
********************************

Какие здесь согласования (фронтенд и бэкенд)
 В запросе 
 ********************
 const GET_DOGS = gql`
    query Query {
        dogs {
            subbreeds
            breed
        }
    }
`;
*********************
Важно совпадение "dogs",
тогда на сервере мы попадаем на обработку ф-цией 
с таким же названием - "dogs".

